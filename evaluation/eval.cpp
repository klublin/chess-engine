#include "eval.hpp"
#include "board.hpp"
#include <iostream>

std::array<int, 12> Evaluation::material_score = { 100, -100, 300, -300, 350, -350, 500, -500, 1000, -1000, 10000, -10000};
// std::array<std::array<int, 64>, 12> Evaluation::positional_scores{{
// {
//      90, 90, 90, 90, 90, 90, 90, 90,
//      30, 30, 30, 40, 40, 30, 30, 30,
//      20, 20, 20, 30, 30, 30, 20, 20,
//      10, 10, 10, 20, 20, 10, 10, 10,
//       5,  5, 10, 20, 20,  5,  5,  5,
//       0,  0,  0,  5,  5,  0,  0,  0,
//       0,  0,  0,-10,-10,  0,  0,  0,
//       0,  0,  0,  0,  0,  0,  0,  0,
    
// },
// {
//       0,  0,  0,  0,  0,  0,  0,  0,
//       0,  0,  0,-10,-10,  0,  0,  0,
//       0,  0,  0,  5,  5,  0,  0,  0,
//       5,  5, 10, 20, 20,  5,  5,  5,
//      10, 10, 10, 20, 20, 10, 10, 10,
//      20, 20, 20, 30, 30, 30, 20, 20,
//      30, 30, 30, 40, 40, 30, 30, 30,
//      90, 90, 90, 90, 90, 90, 90, 90,
    
// },
// {
//      -5,  0,  0,  0,  0,  0,  0, -5,
//      -5,  0,  0, 10, 10,  0,  0, -5,
//      -5,  5, 20, 20, 20, 20,  5, -5,
//      -5, 10, 20, 30, 30, 20, 10, -5,
//      -5, 10, 20, 30, 30, 20, 10, -5,
//      -5,  5, 20, 10, 10, 20,  5, -5,
//      -5,  0,  0,  0,  0,  0,  0, -5,
//      -5,-10,  0,  0,  0,  0,-10, -5,
    
// },
// {
//      -5,-10,  0,  0,  0,  0,-10, -5,
//      -5,  0,  0,  0,  0,  0,  0, -5,
//      -5,  5, 20, 10, 10, 20,  5, -5,
//      -5, 10, 20, 30, 30, 20, 10, -5,
//      -5, 10, 20, 30, 30, 20, 10, -5,
//      -5,  5, 20, 20, 20, 20,  5, -5,
//      -5,  0,  0, 10, 10,  0,  0, -5,
//      -5,  0,  0,  0,  0,  0,  0, -5,
    
// },
// {
//       0,  0,  0,  0,  0,  0,  0,  0,
//       0,  0,  0,  0,  0,  0,  0,  0,
//       0,  0,  0, 10, 10,  0,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0, 10,  0,  0,  0,  0, 10,  0,
//       0, 30,  0,  0,  0,  0, 30,  0,
//       0,  0,-10,  0,  0,-10,  0,  0,
    
// },
// {
//       0,  0,-10,  0,  0,-10,  0,  0,
//       0, 30,  0,  0,  0,  0, 30,  0,
//       0, 10,  0,  0,  0,  0, 10,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0,  0, 10, 10,  0,  0,  0,
//       0,  0,  0,  0,  0,  0,  0,  0,
//       0,  0,  0,  0,  0,  0,  0,  0,
    
// },
// {
//      50, 50, 50, 50, 50, 50, 50, 50,
//      50, 50, 50, 50, 50, 50, 50, 50,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0,  0, 20, 20,  0,  0,  0,
    
// },
// {
//       0,  0,  0, 20, 20,  0,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//       0,  0, 10, 20, 20, 10,  0,  0,
//      50, 50, 50, 50, 50, 50, 50, 50,
//      50, 50, 50, 50, 50, 50, 50, 50,
    
// },
// {
//     -20,-10,-10, -5, -5,-10,-10,-20,
//     -10,  0,  0,  0,  0,  0,  0,-10,
//     -10,  0,  5,  5,  5,  5,  0,-10,
//      -5,  0,  5,  5,  5,  5,  0, -5,
//       0,  0,  5,  5,  5,  5,  0, -5,
//     -10,  5,  5,  5,  5,  5,  0,-10,
//     -10,  0,  5,  0,  0,  0,  0,-10,
//     -20,-10,-10, -5, -5,-10,-10,-20,
    
// },
// {
//     -20,-10,-10, -5, -5,-10,-10,-20,
//     -10,  0,  5,  0,  0,  0,  0,-10,
//     -10,  5,  5,  5,  5,  5,  0,-10,
//       0,  0,  5,  5,  5,  5,  0, -5,
//      -5,  0,  5,  5,  5,  5,  0, -5,
//     -10,  0,  5,  5,  5,  5,  0,-10,
//     -10,  0,  0,  0,  0,  0,  0,-10,
//     -20,-10,-10, -5, -5,-10,-10,-20,
    
// },
// {
//       0,  0,  0,  0,  0,  0,  0,  0,
//       0,  0,  5,  5,  5,  5,  0,  0,
//       0,  5,  5, 10, 10,  5,  5,  0,
//       0,  5, 10, 20, 20, 10,  5,  0,
//       0,  5, 10, 20, 20, 10,  5,  0,
//       0,  0,  5, 10, 10,  5,  0,  0,
//       0,  5,  5, -5, -5,  0,  5,  0,
//       0,  0,  5,  0,-15,  0, 10,  0,
    
// },
// {
//       0,  0,  5,  0,-15,  0, 10,  0,
//       0,  5,  5, -5, -5,  0,  5,  0,
//       0,  0,  5, 10, 10,  5,  0,  0,
//       0,  5, 10, 20, 20, 10,  5,  0,
//       0,  5, 10, 20, 20, 10,  5,  0,
//       0,  5,  5, 10, 10,  5,  5,  0,
//       0,  0,  5,  5,  5,  5,  0,  0,
//       0,  0,  0,  0,  0,  0,  0,  0,
    
// },
// }};

std::array<std::array<int, 64>, 12> Evaluation::positional_scores{{
{
      0,  0,  0,  0,  0,  0,  0,  0,
     50, 50, 50, 50, 50, 50, 50, 50,
     10, 10, 20, 30, 30, 20, 10, 10,
      5,  5, 10, 25, 25, 10,  5,  5,
      0,  0,  0, 20, 20,  0,  0,  0,
      5, -5,-10,  0,  0,-10, -5,  5,
      5, 10, 10,-20,-20, 10, 10,  5,
      0,  0,  0,  0,  0,  0,  0,  0,

},
{
      0,  0,  0,  0,  0,  0,  0,  0,
      5, 10, 10,-20,-20, 10, 10,  5,
      5, -5,-10,  0,  0,-10, -5,  5,
      0,  0,  0, 20, 20,  0,  0,  0,
      5,  5, 10, 25, 25, 10,  5,  5,
     10, 10, 20, 30, 30, 20, 10, 10,
     50, 50, 50, 50, 50, 50, 50, 50,
      0,  0,  0,  0,  0,  0,  0,  0,

},
{
    -50,-40,-30,-30,-30,-30,-40,-50,
    -40,-20,  0,  0,  0,  0,-20,-40,
    -30,  0, 10, 15, 15, 10,  0,-30,
    -30,  5, 15, 20, 20, 15,  5,-30,
    -30,  0, 15, 20, 20, 15,  0,-30,
    -30,  5, 10, 15, 15, 10,  5,-30,
    -40,-20,  0,  5,  5,  0,-20,-40,
    -50,-40,-30,-30,-30,-30,-40,-50,

},
{
    -50,-40,-30,-30,-30,-30,-40,-50,
    -40,-20,  0,  5,  5,  0,-20,-40,
    -30,  5, 10, 15, 15, 10,  5,-30,
    -30,  0, 15, 20, 20, 15,  0,-30,
    -30,  5, 15, 20, 20, 15,  5,-30,
    -30,  0, 10, 15, 15, 10,  0,-30,
    -40,-20,  0,  0,  0,  0,-20,-40,
    -50,-40,-30,-30,-30,-30,-40,-50,

},
{
    -20,-10,-10,-10,-10,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5, 10, 10,  5,  0,-10,
    -10,  5,  5, 10, 10,  5,  5,-10,
    -10,  0, 10, 10, 10, 10,  0,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -20,-10,-10,-10,-10,-10,-10,-20,

},
{
    -20,-10,-10,-10,-10,-10,-10,-20,
    -10,  5,  0,  0,  0,  0,  5,-10,
    -10, 10, 10, 10, 10, 10, 10,-10,
    -10,  0, 10, 10, 10, 10,  0,-10,
    -10,  5,  5, 10, 10,  5,  5,-10,
    -10,  0,  5, 10, 10,  5,  0,-10,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -20,-10,-10,-10,-10,-10,-10,-20,

},
{
      0,  0,  0,  0,  0,  0,  0,  0,
      5, 10, 10, 10, 10, 10, 10,  5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
      0,  0,  0,  5,  5,  0,  0,  0,

},
{
      0,  0,  0,  5,  5,  0,  0,  0,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
     -5,  0,  0,  0,  0,  0,  0, -5,
      5, 10, 10, 10, 10, 10, 10,  5,
      0,  0,  0,  0,  0,  0,  0,  0,

},
{
    -20,-10,-10, -5, -5,-10,-10,-20,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -10,  0,  5,  5,  5,  5,  0,-10,
     -5,  0,  5,  5,  5,  5,  0, -5,
      0,  0,  5,  5,  5,  5,  0, -5,
    -10,  5,  5,  5,  5,  5,  0,-10,
    -10,  0,  5,  0,  0,  0,  0,-10,
    -20,-10,-10, -5, -5,-10,-10,-20,

},
{
    -20,-10,-10, -5, -5,-10,-10,-20,
    -10,  0,  5,  0,  0,  0,  0,-10,
    -10,  5,  5,  5,  5,  5,  0,-10,
      0,  0,  5,  5,  5,  5,  0, -5,
     -5,  0,  5,  5,  5,  5,  0, -5,
    -10,  0,  5,  5,  5,  5,  0,-10,
    -10,  0,  0,  0,  0,  0,  0,-10,
    -20,-10,-10, -5, -5,-10,-10,-20,

},
{
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -20,-30,-30,-40,-40,-30,-30,-20,
    -10,-20,-20,-20,-20,-20,-20,-10,
     20, 20,  0,  0,  0,  0, 20, 20,
     20, 30, 10,  0,  0, 10, 30, 20,

},
{
     20, 30, 10,  0,  0, 10, 30, 20,
     20, 20,  0,  0,  0,  0, 20, 20,
    -10,-20,-20,-20,-20,-20,-20,-10,
    -20,-30,-30,-40,-40,-30,-30,-20,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,
    -30,-40,-40,-50,-50,-40,-40,-30,

},
}};

template<color c>
inline int Evaluation::score_board(uint64_t board, int piece){
    int score = 0;

    while(board){
        int square = get_lsb_index(board);
        if(c == BLACK)
            score -= positional_scores[piece][square];
        else{
            score += positional_scores[piece][square];
        }
        score += material_score[piece];
        board &= (board - 1);
    }
    return score;
}

int Evaluation::score_material(State* st){
    int score = 0;

    for(Piece_type pt : {PAWN, KNIGHT, BISHOP, QUEEN, ROOK, KING}){
        uint64_t white_board = st->bitboards[pt];
        uint64_t black_board = st->bitboards[pt + BLACK];

        score += score_board<WHITE>(white_board, pt);
        score += score_board<BLACK>(black_board, pt + BLACK);
    }

    return ((st->side == WHITE) ? score : -score);
}